From bb0dfcb6ba0614a55659729e357c5920c1e18dea Mon Sep 17 00:00:00 2001
From: Cedric Caffy <cedric.caffy@cern.ch>
Date: Wed, 14 Feb 2024 15:57:49 +0100
Subject: [PATCH] [XrdTpcTPC] Packet marking - avoid infinite loop in the case
 the first packet marking handle created got removed after the corresponding
 socket got closed

---
 src/XrdTpc/XrdTpcPMarkManager.cc | 22 +++++++++++++---------
 src/XrdTpc/XrdTpcPMarkManager.hh |  2 --
 2 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/src/XrdTpc/XrdTpcPMarkManager.cc b/src/XrdTpc/XrdTpcPMarkManager.cc
index ee822642df9..89bd93ef4ba 100644
--- a/src/XrdTpc/XrdTpcPMarkManager.cc
+++ b/src/XrdTpc/XrdTpcPMarkManager.cc
@@ -46,34 +46,38 @@ void PMarkManager::startTransfer(XrdHttpExtReq * req) {
 
 void PMarkManager::beginPMarks() {
   if(!mSocketInfos.empty() && mPmarkHandles.empty()) {
-    // Create the first pmark handle that will be used as a basis for the other handles
-    // if that handle cannot be created (mPmark->Begin() would return nullptr), then the packet marking will not work
-    // This base pmark handle will be placed at the beginning of the vector of pmark handles
+    // Create the first pmark handle
     std::stringstream ss;
     ss << "scitag.flow=" << mReq->mSciTag;
     SocketInfo & sockInfo = mSocketInfos.front();
-    mInitialFD = sockInfo.client.addrInfo->SockFD();
     std::unique_ptr<XrdNetPMark::Handle> initialPmark(mPmark->Begin(sockInfo.client, mReq->resource.c_str(), ss.str().c_str(), "http-tpc"));
     if(initialPmark) {
       // It may happen that the socket attached to the file descriptor is not connected yet. If this is the case the initial
-      // Pmark will be nullptr...
-      mPmarkHandles.emplace(mInitialFD,std::move(initialPmark));
+      // Pmark will be nullptr. We will retry when a new call to this function will be performed...
+      mPmarkHandles.emplace(sockInfo.client.addrInfo->SockFD(),std::move(initialPmark));
       mSocketInfos.pop();
     }
   } else {
     // The first pmark handle was created, or not. Create the other pmark handles from the other connected sockets
     while(!mSocketInfos.empty()) {
       SocketInfo & sockInfo = mSocketInfos.front();
-      if(mPmarkHandles[mInitialFD]){
-        std::unique_ptr<XrdNetPMark::Handle> pmark(mPmark->Begin(*sockInfo.client.addrInfo, *mPmarkHandles[mInitialFD], nullptr));
+      // A Packet marker handle can be created from any existing packet marker handle. There is no need to create
+      // it from the initially created one.
+      auto pmarkHandleItor = mPmarkHandles.begin();
+      if(pmarkHandleItor != mPmarkHandles.end()) {
+        std::unique_ptr<XrdNetPMark::Handle> pmark(mPmark->Begin(*sockInfo.client.addrInfo, *(pmarkHandleItor->second), nullptr));
         if(pmark) {
           mPmarkHandles.emplace(sockInfo.client.addrInfo->SockFD(),std::move(pmark));
           mSocketInfos.pop();
         } else {
-          // We could not create the pmark handle from the socket, we break the loop, we will retry later on when
+          // We could not create the pmark handle from the socket because it probably did not connect yet. We break the loop, we will retry later on when
           // this function will be called again.
           break;
         }
+      } else {
+        // There is currently no packet marking on which we can rely on to create the another one. Break this loop. We will try to create a new first packet marking handle
+        // from an available fd in the next round when this function will be called again.
+        break;
       }
     }
   }
diff --git a/src/XrdTpc/XrdTpcPMarkManager.hh b/src/XrdTpc/XrdTpcPMarkManager.hh
index 3da5ddb0aa8..938de5c62d8 100644
--- a/src/XrdTpc/XrdTpcPMarkManager.hh
+++ b/src/XrdTpc/XrdTpcPMarkManager.hh
@@ -107,8 +107,6 @@ private:
   bool mTransferWillStart;
   // The XrdHttpTPC request information
   XrdHttpExtReq * mReq;
-  // The file descriptor used to create the first packet marking handle
-  int mInitialFD = -1;
 };
 } // namespace XrdTpc
 
