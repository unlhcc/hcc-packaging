From bfc81ccdee074c60bea574847e5a883197c68a99 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Mon, 15 Aug 2022 09:51:31 -0500
Subject: [PATCH 1/2] Have built-in audit DB / Acc framework handle new access
 operations.

This properly logs and denies the newly introduced exclusive access/insert
permissions.  Without this, there's an undefined memory read which can
result in permissions to create files.

(cherry picked from commit 566124193a92bbf87a03314ee6b5dba81e084715)
---
 src/XrdAcc/XrdAccAccess.cc | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/XrdAcc/XrdAccAccess.cc b/src/XrdAcc/XrdAccAccess.cc
index 10dd540cd35..6fb4532092a 100644
--- a/src/XrdAcc/XrdAccAccess.cc
+++ b/src/XrdAcc/XrdAccAccess.cc
@@ -300,8 +300,10 @@ int XrdAccAccess::Audit(const int              accok,
                                     "read",            // 8
                                     "readdir",         // 9
                                     "rename",          // 10
-                                    "stat",            // 10
-                                    "update"           // 12
+                                    "stat",            // 11
+                                    "update",          // 12
+                                    "excl_create",     // 13
+                                    "excl_insert"      // 14
                              };
    const char *opname = (oper > AOP_LastOp ? "???" : Opername[oper]);
    std::string username;
@@ -427,8 +429,12 @@ int XrdAccAccess::Test(const XrdAccPrivs priv,const Access_Operation oper)
                                 XrdAccPriv_Readdir,              // 9
                                 XrdAccPriv_Rename,               // 10
                                 XrdAccPriv_Lookup,               // 11
-                                XrdAccPriv_Update                // 12
+                                XrdAccPriv_Update,               // 12
+                                (XrdAccPrivs)0xffff,             // 13
+                                (XrdAccPrivs)0xffff              // 14
                                };
+   // Note AOP_Excl* does not have a corresponding XrdAccPrivs; this is on
+   // purpose as the Excl* privilege is not modelled within the AuditDB framework.
    if (oper < 0 || oper > AOP_LastOp) return 0;
    return (int)(need[oper] & priv) == need[oper];
 }

From bbe1129d48aac121c6d17945ff8c0fbb788cdc71 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Mon, 15 Aug 2022 09:57:01 -0500
Subject: [PATCH 2/2] For new exclusive create/insert permissions, prefer
 EACCES over EEXIST.

If we try to overwrite a file - but have insufficient privileges to do so
- then ensure we return an EACCES (permission denied) instead of an EEXIST.

Since this authorization level has never been in a release yet - and the
HTTP protocol requires an EACCES in this case - this is expected to be
a non-breaking change.

(cherry picked from commit 632bef318e0648953afed701fcd44534bdd7fffb)
---
 src/XrdOfs/XrdOfs.cc | 16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/src/XrdOfs/XrdOfs.cc b/src/XrdOfs/XrdOfs.cc
index ceb8e63ebde..50c4cfe2e85 100644
--- a/src/XrdOfs/XrdOfs.cc
+++ b/src/XrdOfs/XrdOfs.cc
@@ -585,20 +585,26 @@ int XrdOfsFile::open(const char          *path,      // In
       {// Apply security, as needed
        //
        // If we aren't requesting O_EXCL, one needs AOP_Create
+       bool overwrite_permitted = true;
        if (!(open_flag & O_EXCL))
           {if (client && XrdOfsFS->Authorization &&
                !XrdOfsFS->Authorization->Access(client, path, AOP_Create, &Open_Env))
               { // We don't have the ability to create a file without O_EXCL.  If we have AOP_Excl_Create,
                 // then manipulate the open flags and see if we're successful with it.
                 AUTHORIZE(client,&Open_Env,AOP_Excl_Create,"create",path,error);
+                overwrite_permitted = false;
                 open_flag |= O_EXCL;
                 open_flag &= ~O_TRUNC;
               }
           }
        // If we are in O_EXCL mode, then we accept either AOP_Excl_Create or AOP_Create
        else if (client && XrdOfsFS->Authorization &&
-            !XrdOfsFS->Authorization->Access(client, path, AOP_Excl_Create, &Open_Env))
-          {AUTHORIZE(client,&Open_Env,AOP_Create,"create",path,error);}
+            !XrdOfsFS->Authorization->Access(client, path, AOP_Create, &Open_Env))
+          {AUTHORIZE(client,&Open_Env,AOP_Excl_Create,"create",path,error);
+           // In this case, we don't have AOP_Create but we do have AOP_Excl_Create; note that
+           // overwrites are not permitted (this is later used to correct an error code).
+           overwrite_permitted = false;
+          }
 
        OOIDENTENV(client, Open_Env);
 
@@ -621,7 +627,11 @@ int XrdOfsFile::open(const char          *path,      // In
                return XrdOfsFS->fsError(error, SFS_STARTED);
               }
            if (retc != -ENOTSUP)
-              {if (XrdOfsFS->Balancer) XrdOfsFS->Balancer->Removed(path);
+              {// If we tried to overwrite an existing file but do not have the AOP_Create
+               // privilege, then ensure we generate a 'permission denied' instead of 'exists'
+               if ((open_flag & O_EXCL) && retc == -EEXIST && !overwrite_permitted)
+                  {retc = -EACCES;}
+               if (XrdOfsFS->Balancer) XrdOfsFS->Balancer->Removed(path);
                return XrdOfsFS->Emsg(epname, error, retc, "create", path);
               }
           } else {
