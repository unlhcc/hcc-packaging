From 9780ade6e18c2f8a1f93ab0abb5787b9c50bd55e Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Thu, 14 Sep 2017 15:00:35 -0500
Subject: [PATCH 1/2] Add const correctness to helper function.

---
 src/XrdHttp/XrdHttpUtils.cc | 2 +-
 src/XrdHttp/XrdHttpUtils.hh | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/XrdHttp/XrdHttpUtils.cc b/src/XrdHttp/XrdHttpUtils.cc
index 9fe0db0fb4b..88a899b2d82 100644
--- a/src/XrdHttp/XrdHttpUtils.cc
+++ b/src/XrdHttp/XrdHttpUtils.cc
@@ -319,7 +319,7 @@ char *unquote(char *str) {
 
 // Quote a string and return a new one
 
-char *quote(char *str) {
+char *quote(const char *str) {
   int l = strlen(str);
   char *r = (char *) malloc(l*3 + 1);
   r[0] = '\0';
diff --git a/src/XrdHttp/XrdHttpUtils.hh b/src/XrdHttp/XrdHttpUtils.hh
index cc15be94728..ab5acbcf80d 100644
--- a/src/XrdHttp/XrdHttpUtils.hh
+++ b/src/XrdHttp/XrdHttpUtils.hh
@@ -73,7 +73,7 @@ int compareHash(
 
 
 // Create a new quoted string
-char *quote(char *str);
+char *quote(const char *str);
 
 // unquote a string and return a new one
 char *unquote(char *str);

From e2eb5a32c08dcbf1e3810145a4f74802ae4e56a8 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Thu, 14 Sep 2017 15:00:43 -0500
Subject: [PATCH 2/2] Pass the authorization header to the bridge as opaque
 info.

This allows any ACC plugins to utilize the contents of the authorization
header, providing a mechanism for request-level authorization that is
more common on the web.
---
 src/XrdHttp/XrdHttpReq.cc | 24 +++++++++++++++++++++---
 src/XrdHttp/XrdHttpReq.hh |  2 ++
 2 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/src/XrdHttp/XrdHttpReq.cc b/src/XrdHttp/XrdHttpReq.cc
index 8102f563ba0..a17226444b9 100644
--- a/src/XrdHttp/XrdHttpReq.cc
+++ b/src/XrdHttp/XrdHttpReq.cc
@@ -185,6 +185,9 @@ int XrdHttpReq::parseLine(char *line, int len) {
     } else if (!strcmp(key, "Destination")) {
       destination.assign(val, line+len-val);
       trim(destination);
+    } else if (!strcmp(key, "Authorization")) {
+      authorization.assign(val, line+len-val);
+      trim(authorization);
     } else if (!strcmp(key, "Depth")) {
       depth = -1;
       if (strcmp(val, "infinity"))
@@ -762,9 +765,24 @@ int XrdHttpReq::ProcessHTTPReq() {
     return 1; // There was an error and a response was sent
     
   }
-  
-  
-  
+
+  /// If we have received extra authorization information, add it here.
+  //  NOTE: this was already added to the headers given to the XrdHttpExtReq -
+  //  no need to interact with the code above
+  if (!authorization.empty()) {
+    const char *p = strchr(resourceplusopaque.c_str(), '?');
+    if (p) {
+      resourceplusopaque.append("&authz=");
+    } else {
+      resourceplusopaque.append("?authz=");
+    }
+    resourceplusopaque.append(quote(authorization.c_str()));
+    // Once we've appended the authorization to the full resource+opaque string,
+    // reset the authz to empty: this way, any operation that triggers repeated ProcessHTTPReq
+    // calls won't also trigger multiple copies of the authz.
+    authorization = "";
+  }
+
   //
   // Here we process the request locally
   //
diff --git a/src/XrdHttp/XrdHttpReq.hh b/src/XrdHttp/XrdHttpReq.hh
index e69f89b8b85..48dc3d2db9b 100644
--- a/src/XrdHttp/XrdHttpReq.hh
+++ b/src/XrdHttp/XrdHttpReq.hh
@@ -194,6 +194,8 @@ public:
   /// The destination field specified in the req
   std::string destination;
 
+  /// The authorization specified in the req;
+  std::string authorization;
 
   //
   // Area for coordinating request and responses to/from the bridge
